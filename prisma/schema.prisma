// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    cart          Cart[]
    order         Order[]
}

model Author {
    id   Int    @id @default(autoincrement())
    name String @unique
    Book Book[]
}

model Book {
    id                Int        @id @default(autoincrement())
    title             String?
    price             Decimal
    discount          Decimal?
    currentPrice      Decimal
    quantityAvailable BigInt
    authors           Author[]
    averageRating     Decimal
    isbn              String
    isbn13            String
    languageCode      String
    numPages          Int
    publictionDate    DateTime
    publisher         Publisher  @relation(fields: [publisherId], references: [id])
    publisherId       Int
    CartItem          CartItem[]
    LineItem          LineItem[]
}

model Publisher {
    id   Int    @id @default(autoincrement())
    name String @unique
    Book Book[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Cart {
    code      String     @id @default(cuid())
    cartItems CartItem[]
    user      User       @relation(fields: [userId], references: [id])
    userId    String
    address   Address?   @relation(fields: [addressId], references: [id])
    addressId String?
    subtotal  Decimal
    total     Decimal
}

model Address {
    id         String  @id @default(cuid())
    fullName   String
    address    String
    city       String
    state      String
    country    String
    postalCode String
    phone      String
    cart       Cart[]
    order      Order[]
}

model CartItem {
    id       Int    @id @default(autoincrement())
    quantity Int
    book     Book   @relation(fields: [bookId], references: [id])
    bookId   Int
    cart     Cart   @relation(fields: [cartCode], references: [code])
    cartCode String
}

model Order {
    id        Int        @id @default(autoincrement())
    lineItems LineItem[]
    user      User       @relation(fields: [userId], references: [id])
    address   Address    @relation(fields: [addressId], references: [id])
    addressId String
    cartCode  String
    userId    String
    orderDate DateTime
    subtotal  Decimal
    total     Decimal
}

model LineItem {
    id           Int      @id @default(autoincrement())
    quantity     Int
    book         Book     @relation(fields: [bookId], references: [id])
    order        Order    @relation(fields: [orderId], references: [id])
    bookId       Int
    orderId      Int
    price        Decimal
    discount     Decimal?
    currentPrice Decimal
}
